import { ANALYZE_FOR_ENTRY_COMPONENTS, APP_INITIALIZER, Inject, InjectionToken, NgModule, Optional, SkipSelf } from '@angular/core';
import { provideRoutes, Router, RouterModule, ROUTES } from '@angular/router';
import { I18NRouterLoader, I18NRouterStaticLoader } from './src/i18n-router.loader';
import { I18NRouterPipe } from './src/i18n-router.pipe';
import { I18NRouterService, provideChildRoutes } from './src/i18n-router.service';
export * from './src/i18n-router.loader';
export * from './src/i18n-router.pipe';
export * from './src/i18n-router.service';
export var RAW_ROUTES = new InjectionToken('RAW_ROUTES');
export var I18N_ROUTER_PROVIDERS = [
    I18NRouterService
];
export function i18nRouterFactory(routes) {
    return new I18NRouterStaticLoader(routes, {});
}
export function initializerFactory(loader) {
    var res = function () { return loader.loadTranslations(); };
    return res;
}
export var I18N_ROUTER_FORROOT_GUARD = new InjectionToken('I18N_ROUTER_FORROOT_GUARD');
export var MODULE_KEY = new InjectionToken('MODULE_KEY');
var I18NRouterModule = (function () {
    function I18NRouterModule(guard) {
    }
    I18NRouterModule.forRoot = function (routes, configuredProviders) {
        if (configuredProviders === void 0) { configuredProviders = [{
                provide: I18NRouterLoader,
                useFactory: (i18nRouterFactory),
                deps: [RAW_ROUTES]
            }]; }
        return {
            ngModule: I18NRouterModule,
            providers: configuredProviders.concat([
                {
                    provide: APP_INITIALIZER,
                    useFactory: (initializerFactory),
                    deps: [I18NRouterLoader],
                    multi: true
                },
                {
                    provide: RAW_ROUTES,
                    useValue: routes
                },
                {
                    provide: I18N_ROUTER_FORROOT_GUARD,
                    useFactory: (provideForRootGuard),
                    deps: [[Router, new Optional(), new SkipSelf()]]
                }
            ])
        };
    };
    I18NRouterModule.forChild = function (routes, moduleKey) {
        return {
            ngModule: I18NRouterModule,
            providers: [
                provideRoutes([]),
                {
                    provide: RAW_ROUTES,
                    useValue: routes
                },
                {
                    provide: MODULE_KEY,
                    useValue: moduleKey
                },
                {
                    provide: ROUTES,
                    useFactory: (provideChildRoutes),
                    deps: [I18NRouterService, RAW_ROUTES, MODULE_KEY],
                    multi: true
                },
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    useValue: routes,
                    multi: true
                }
            ]
        };
    };
    return I18NRouterModule;
}());
export { I18NRouterModule };
I18NRouterModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule],
                declarations: [I18NRouterPipe],
                exports: [
                    I18NRouterPipe,
                    RouterModule
                ]
            },] },
];
I18NRouterModule.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [I18N_ROUTER_FORROOT_GUARD,] },] },
]; };
export function provideForRootGuard(router) {
    if (router)
        throw new Error('I18NRouterModule.forRoot() called twice. Child modules should use I18NRouterModule.forChild() instead.');
    return 'guarded';
}
