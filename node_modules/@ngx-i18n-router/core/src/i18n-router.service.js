import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import * as _ from 'lodash';
import { I18NRouterLoader } from './i18n-router.loader';
export var ROOT_ROUTE_PREFIX = 'ROOT';
var I18NRouterService = (function () {
    function I18NRouterService(loader, router) {
        this.loader = loader;
        this.router = router;
        this.routes = _.map(this.loader.getRoutes(), _.cloneDeep);
    }
    I18NRouterService.prototype.init = function (useLocalizedRoutes) {
        if (useLocalizedRoutes === void 0) { useLocalizedRoutes = true; }
        if (!useLocalizedRoutes)
            return;
        this.useLocalizedRoutes = true;
        this.translations = this.loader.getTranslations();
    };
    I18NRouterService.prototype.changeLanguage = function (languageCode) {
        if (!this.useLocalizedRoutes)
            return;
        if (!this.translations[languageCode])
            return;
        this.languageCode = languageCode;
        var rawRoutes = this.loader.getRoutes();
        var i18nRoot = _.find(rawRoutes, function (route) { return _.get(route, 'data.i18n.isRoot', undefined); });
        var routes = [];
        if (!!i18nRoot) {
            var rootPath = this.translateRoute(i18nRoot, 'path').path || i18nRoot.path;
            routes = [{
                    path: '',
                    redirectTo: this.interpolateRoute(rootPath),
                    pathMatch: 'full'
                }];
        }
        var translatedRoutes = this.translateRoutes(rawRoutes);
        routes = routes.concat(translatedRoutes);
        this.router.resetConfig(routes);
    };
    I18NRouterService.prototype.getTranslation = function (key) {
        key = key.replace(/-/, '_');
        return _.get(this.translations, this.languageCode + "." + key.toUpperCase(), undefined);
    };
    I18NRouterService.prototype.translateRoutes = function (routes, moduleKey) {
        var _this = this;
        if (moduleKey === void 0) { moduleKey = ''; }
        var translatedRoutes = [];
        routes.forEach(function (route) {
            if (_.isArray(route.children)) {
                if (_.get(route, 'data.i18n.isRoot', false))
                    route.path = _this.interpolateRoute(route.path);
                else {
                    if (!!route.path)
                        route = _this.translateRoute(route, 'path', moduleKey);
                }
                route.children = _this.translateRoutes(route.children, moduleKey);
            }
            else if (!moduleKey && route.path === '**') {
                route.redirectTo = _this.interpolateRoute(route.redirectTo);
            }
            else {
                if (!!route.path)
                    route = _this.translateRoute(route, 'path', moduleKey);
                if (!!route.redirectTo)
                    route = _this.translateRoute(route, 'redirectTo', moduleKey);
            }
            translatedRoutes.push(route);
        });
        return translatedRoutes;
    };
    I18NRouterService.prototype.interpolateRoute = function (path) {
        if (!path || path.length === 0)
            return this.languageCode;
        path = _.filter(path.split('/'), function (segment) { return !!segment; }).join('/');
        return this.languageCode + "/" + path;
    };
    I18NRouterService.prototype.translateRoute = function (route, property, moduleKey) {
        var _this = this;
        if (moduleKey === void 0) { moduleKey = ''; }
        var translateBatch = [];
        var batchKey = '';
        var key = _.filter(route[property].split('/'), function (segment) { return !!segment; });
        var isRedirection = property === 'redirectTo' && _.startsWith(route[property], '/');
        key.forEach(function (segment, index) {
            var prefix = '';
            var currentKey = ROOT_ROUTE_PREFIX + "." + (!!moduleKey && !isRedirection ? moduleKey + "." : '') + segment;
            if (index === 0) {
                prefix = _this.getTranslation(currentKey);
                if (!!prefix) {
                    if (isRedirection)
                        translateBatch.push(_this.languageCode);
                    batchKey = currentKey;
                }
            }
            currentKey = index === 0 ? (!!prefix ? batchKey : segment) : batchKey + "." + segment;
            var translatedSegment = !_.startsWith(segment, ':') ? _this.getTranslation(currentKey) : '';
            if (!!translatedSegment)
                batchKey = currentKey;
            translateBatch.push(translatedSegment || segment);
        });
        route[property] = translateBatch.join('/');
        if (isRedirection)
            route[property] = "/" + route[property];
        return route;
    };
    return I18NRouterService;
}());
export { I18NRouterService };
I18NRouterService.decorators = [
    { type: Injectable },
];
I18NRouterService.ctorParameters = function () { return [
    { type: I18NRouterLoader, },
    { type: Router, },
]; };
export function provideChildRoutes(i18nRouter, routes, moduleKey) {
    if (!i18nRouter.useLocalizedRoutes)
        return routes;
    return i18nRouter.translateRoutes(routes, moduleKey);
}
