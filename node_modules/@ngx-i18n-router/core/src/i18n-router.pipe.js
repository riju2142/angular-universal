import { Injectable, Pipe } from '@angular/core';
import * as _ from 'lodash';
import { I18NRouterService, ROOT_ROUTE_PREFIX } from './i18n-router.service';
var I18NRouterPipe = (function () {
    function I18NRouterPipe(i18nRouter) {
        this.i18nRouter = i18nRouter;
    }
    I18NRouterPipe.prototype.transform = function (value) {
        if (typeof value === 'string' && _.get(value, 'length', 0))
            throw new Error('Query must be an empty string or an array!');
        if (!this.i18nRouter.languageCode || !this.i18nRouter.useLocalizedRoutes)
            return "/" + (typeof value === 'string' ? value : value.join('/'));
        if (_.get(value, 'length', 0) === 0)
            return "/" + this.i18nRouter.languageCode;
        return "/" + this.translateQuery(value);
    };
    I18NRouterPipe.prototype.translateQuery = function (value) {
        var _this = this;
        var translateBatch = [];
        var batchKey = '';
        value.forEach(function (segment, index) {
            if (typeof segment === 'string') {
                var prefix = '';
                var currentKey = ROOT_ROUTE_PREFIX + "." + segment;
                if (index === 0) {
                    prefix = _this.i18nRouter.getTranslation(currentKey);
                    if (!!prefix) {
                        batchKey = currentKey;
                        translateBatch.push(_this.i18nRouter.languageCode);
                    }
                }
                currentKey = index === 0 ? (!!prefix ? batchKey : segment) : batchKey + "." + segment;
                var translatedSegment = _this.i18nRouter.getTranslation(currentKey);
                if (!!translatedSegment)
                    batchKey = currentKey;
                translateBatch.push(translatedSegment || segment);
            }
            else
                translateBatch.push(segment);
        });
        return translateBatch.join('/');
    };
    return I18NRouterPipe;
}());
export { I18NRouterPipe };
I18NRouterPipe.decorators = [
    { type: Injectable },
    { type: Pipe, args: [{
                name: 'i18nRouter',
                pure: false
            },] },
];
I18NRouterPipe.ctorParameters = function () { return [
    { type: I18NRouterService, },
]; };
