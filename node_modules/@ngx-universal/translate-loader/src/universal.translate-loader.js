import * as tslib_1 from "tslib";
import { isPlatformServer } from '@angular/common';
import { readFileSync } from 'fs';
import { Observable } from 'rxjs/Observable';
import { Cached, CacheKey } from '@ngx-cache/core';
var UniversalTranslateLoader = (function () {
    function UniversalTranslateLoader(platformId, browserLoader, prefix, suffix) {
        if (prefix === void 0) { prefix = './assets/i18n/'; }
        if (suffix === void 0) { suffix = '.json'; }
        this.platformId = platformId;
        this.browserLoader = browserLoader;
        this.prefix = prefix;
        this.suffix = suffix;
    }
    UniversalTranslateLoader.prototype.getTranslation = function (lang) {
        var _this = this;
        return isPlatformServer(this.platformId)
            ? Observable.create(function (observer) {
                observer.next(JSON.parse(readFileSync("./" + _this.prefix + "/" + lang + _this.suffix, 'utf8')));
                observer.complete();
            })
            : this.browserLoader.getTranslation(lang);
    };
    ;
    return UniversalTranslateLoader;
}());
export { UniversalTranslateLoader };
tslib_1.__decorate([
    Cached('ngx-translate__translations'),
    tslib_1.__param(0, CacheKey),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Observable)
], UniversalTranslateLoader.prototype, "getTranslation", null);
