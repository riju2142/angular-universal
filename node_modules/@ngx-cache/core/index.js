import { InjectionToken, Injector, NgModule, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { CacheLoader, CacheStaticLoader } from './src/cache.loader';
import { CacheService } from './src/cache.service';
export * from './src/cache';
export * from './src/cache.loader';
export * from './src/cache.service';
export * from './src/cached.decorator';
export * from './src/storage';
export var STORAGE = new InjectionToken('STORAGE');
export function cacheFactory() {
    return new CacheStaticLoader();
}
export function cacheServiceFactory(loader, platformId, injector) {
    return new CacheService(loader, platformId, injector);
}
var CacheModule = (function () {
    function CacheModule(parentModule) {
        if (parentModule)
            throw new Error('CacheModule already loaded; import in root module only.');
    }
    CacheModule.forRoot = function (configuredProvider) {
        if (configuredProvider === void 0) { configuredProvider = {
            provide: CacheLoader,
            useFactory: (cacheFactory)
        }; }
        return {
            ngModule: CacheModule,
            providers: [
                configuredProvider,
                {
                    provide: CacheService,
                    useFactory: (cacheServiceFactory),
                    deps: [
                        CacheLoader,
                        PLATFORM_ID,
                        Injector
                    ]
                }
            ]
        };
    };
    return CacheModule;
}());
export { CacheModule };
CacheModule.decorators = [
    { type: NgModule },
];
CacheModule.ctorParameters = function () { return [
    { type: CacheModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
]; };
