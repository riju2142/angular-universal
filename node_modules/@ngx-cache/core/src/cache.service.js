import { Inject, Injectable, InjectionToken, Injector, PLATFORM_ID } from '@angular/core';
import { ReturnType } from './models/return-type';
import { CacheLoader } from './cache.loader';
export var CACHE = new InjectionToken('CACHE');
var CacheService = (function () {
    function CacheService(loader, platformId, injector) {
        this.loader = loader;
        this.platformId = platformId;
        this.injector = injector;
        CacheService.instance = this;
        this.cache = this.injector.get(CACHE);
        this.options = loader.options;
    }
    CacheService.getInstance = function (loader, platformId, injector) {
        return CacheService.instance;
    };
    CacheService.normalizeKey = function (key) {
        if (CacheService.validateKey(key))
            throw new Error('Please provide a valid key to save in the CacheService');
        return "" + key;
    };
    CacheService.validateKey = function (key) {
        return !key
            || typeof key === 'boolean'
            || Number.isNaN(key);
    };
    CacheService.validateValue = function (value) {
        return !!value.options.expiry && value.options.expiry > Date.now();
    };
    Object.defineProperty(CacheService.prototype, "key", {
        get: function () {
            return this.loader.key;
        },
        enumerable: true,
        configurable: true
    });
    CacheService.prototype.has = function (key) {
        key = CacheService.normalizeKey(key);
        return this.cache.keys.indexOf(key) !== -1;
    };
    CacheService.prototype.set = function (key, value, returnType, options) {
        if (returnType === void 0) { returnType = ReturnType.Scalar; }
        key = CacheService.normalizeKey(key);
        options = options || this.options;
        return this.cache.setItem(key, {
            data: value,
            returnType: returnType,
            options: this.parseOptions(options)
        });
    };
    CacheService.prototype.get = function (key) {
        key = CacheService.normalizeKey(key);
        var cached = this.cache.getItem(key);
        var res;
        if (!!cached)
            if (CacheService.validateValue(cached))
                res = cached.data;
            else
                this.remove(key);
        return res;
    };
    CacheService.prototype.getWithMetadata = function (key) {
        key = CacheService.normalizeKey(key);
        var cached = this.cache.getItem(key);
        var res;
        if (!!cached)
            if (CacheService.validateValue(cached))
                res = cached;
            else
                this.remove(key);
        return res;
    };
    CacheService.prototype.remove = function (key, wild) {
        if (wild === void 0) { wild = false; }
        key = CacheService.normalizeKey(key);
        this.cache.removeItem(key, wild);
    };
    CacheService.prototype.clear = function () {
        this.cache.clear();
    };
    CacheService.prototype.dehydrate = function () {
        var _this = this;
        var keys = this.cache.keys || [];
        var res = {};
        keys.forEach(function (key) {
            res[key] = _this.cache.getItem(key);
        });
        return res;
    };
    CacheService.prototype.rehydrate = function (json) {
        var _this = this;
        Object.keys(json).forEach(function (key) {
            key = CacheService.normalizeKey(key);
            _this.cache.setItem(key, json[key]);
        });
    };
    CacheService.prototype.parseOptions = function (options) {
        return {
            expiry: options.expiry || (options.TTL ? Date.now() + (options.TTL * 1000) : this.options.expiry),
            TTL: options.TTL || this.options.TTL
        };
    };
    return CacheService;
}());
export { CacheService };
CacheService.instance = undefined;
CacheService.decorators = [
    { type: Injectable },
];
CacheService.ctorParameters = function () { return [
    { type: CacheLoader, },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: Injector, },
]; };
