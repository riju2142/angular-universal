import { InjectionToken, Injector } from '@angular/core';
import { CacheOptions } from './models/cache-options';
import { CacheValue } from './models/cache-value';
import { ReturnType } from './models/return-type';
import { Cache } from './cache';
import { CacheLoader } from './cache.loader';
export declare const CACHE: InjectionToken<Cache>;
export declare class CacheService {
    readonly loader: CacheLoader;
    private readonly platformId;
    private readonly injector;
    private static instance;
    private readonly cache;
    private readonly options;
    static getInstance(loader?: CacheLoader, platformId?: any, injector?: Injector): CacheService;
    static normalizeKey(key: string | number): string;
    private static validateKey(key);
    private static validateValue(value);
    constructor(loader: CacheLoader, platformId: any, injector: Injector);
    readonly key: string;
    has(key: string | number): boolean;
    set(key: string | number, value: any, returnType?: ReturnType, options?: CacheOptions): boolean;
    get(key: string | number): any;
    getWithMetadata(key: string | number): CacheValue;
    remove(key: string | number, wild?: boolean): void;
    clear(): void;
    dehydrate(): any;
    rehydrate(json: any): void;
    private parseOptions(options);
}
