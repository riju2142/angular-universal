import { Inject, InjectionToken, NgModule, Optional, SkipSelf } from '@angular/core';
import { CacheService } from '@ngx-cache/core';
export * from './src/local-storage-cache.service';
export * from './src/memory-cache.service';
export var STATE_ID = new InjectionToken('STATE_ID');
var BrowserCacheModule = (function () {
    function BrowserCacheModule(parentModule, stateId, cache) {
        this.stateId = stateId;
        this.cache = cache;
        if (parentModule)
            throw new Error('BrowserCacheModule already loaded; import in BROWSER module only.');
        if (!!stateId) {
            var defaultValue = {};
            var serverCache = this.getCacheValue(defaultValue);
            cache.rehydrate(serverCache);
        }
    }
    BrowserCacheModule.forRoot = function (configuredProviders) {
        return {
            ngModule: BrowserCacheModule,
            providers: configuredProviders
        };
    };
    BrowserCacheModule.prototype.getCacheValue = function (defaultValue) {
        var win = window;
        if (!win)
            return defaultValue;
        if (!win[this.stateId])
            return defaultValue;
        if (!!win[this.stateId][this.cache.key]) {
            var serverCache = defaultValue;
            try {
                serverCache = JSON.parse(win[this.stateId][this.cache.key]);
                if (typeof serverCache !== typeof defaultValue)
                    serverCache = defaultValue;
            }
            catch (e) {
                serverCache = defaultValue;
            }
            return serverCache;
        }
        return defaultValue;
    };
    return BrowserCacheModule;
}());
export { BrowserCacheModule };
BrowserCacheModule.decorators = [
    { type: NgModule },
];
BrowserCacheModule.ctorParameters = function () { return [
    { type: BrowserCacheModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STATE_ID,] },] },
    { type: CacheService, },
]; };
