import { isPlatformBrowser } from '@angular/common';
import { Inject, PLATFORM_ID } from '@angular/core';
var MemoryCacheService = (function () {
    function MemoryCacheService(platformId) {
        this.platformId = platformId;
        if (!this.isEnabled)
            throw new Error('MemoryCacheService is not supported outside `browser` platform!');
        this.memoryStorage = new Map();
    }
    Object.defineProperty(MemoryCacheService.prototype, "isEnabled", {
        get: function () {
            return isPlatformBrowser(this.platformId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MemoryCacheService.prototype, "keys", {
        get: function () {
            if (!this.isEnabled)
                return undefined;
            return Array.from(this.memoryStorage.keys());
        },
        enumerable: true,
        configurable: true
    });
    MemoryCacheService.prototype.setItem = function (key, value) {
        if (!this.isEnabled)
            return false;
        this.memoryStorage.set(key, value);
        return true;
    };
    MemoryCacheService.prototype.getItem = function (key) {
        if (!this.isEnabled)
            return undefined;
        return this.memoryStorage.get(key);
    };
    MemoryCacheService.prototype.removeItem = function (key, wild) {
        if (wild === void 0) { wild = false; }
        if (!this.isEnabled)
            return;
        this.memoryStorage.delete(key);
        if (wild)
            for (var _i = 0, _a = this.keys; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.indexOf(key) === 0)
                    this.memoryStorage.delete(item);
            }
    };
    MemoryCacheService.prototype.clear = function () {
        if (!this.isEnabled)
            return;
        this.memoryStorage.clear();
    };
    return MemoryCacheService;
}());
export { MemoryCacheService };
MemoryCacheService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
]; };
