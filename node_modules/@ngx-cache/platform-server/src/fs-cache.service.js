import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, Injector, PLATFORM_ID } from '@angular/core';
import { STORAGE } from '@ngx-cache/core';
var FsCacheService = (function () {
    function FsCacheService(platformId, injector) {
        this.platformId = platformId;
        this.injector = injector;
        if (!isPlatformServer(platformId))
            throw new Error('FsCacheService is not supported outside `server` platform!');
        this.fsStorage = injector.get(STORAGE);
    }
    Object.defineProperty(FsCacheService.prototype, "isEnabled", {
        get: function () {
            if (!isPlatformServer(this.platformId))
                return false;
            try {
                this.fsStorage.setItem('test', 'test');
                this.fsStorage.removeItem('test');
                return true;
            }
            catch (e) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FsCacheService.prototype, "keys", {
        get: function () {
            if (!this.isEnabled)
                return undefined;
            return this.fsStorage.keys;
        },
        enumerable: true,
        configurable: true
    });
    FsCacheService.prototype.setItem = function (key, value) {
        if (!this.isEnabled)
            return false;
        try {
            this.fsStorage.setItem(key, JSON.stringify(value));
            return true;
        }
        catch (e) {
            return false;
        }
    };
    FsCacheService.prototype.getItem = function (key) {
        if (!this.isEnabled)
            return undefined;
        var value = this.fsStorage.getItem(key);
        return value ? JSON.parse(value) : undefined;
    };
    FsCacheService.prototype.removeItem = function (key, wild) {
        if (wild === void 0) { wild = false; }
        if (!this.isEnabled)
            return;
        this.fsStorage.removeItem(key);
        if (wild)
            for (var _i = 0, _a = this.keys; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.indexOf(key) === 0)
                    this.fsStorage.removeItem(item);
            }
    };
    FsCacheService.prototype.clear = function () {
        if (!this.isEnabled)
            return;
        this.fsStorage.clear();
    };
    return FsCacheService;
}());
export { FsCacheService };
FsCacheService.decorators = [
    { type: Injectable },
];
FsCacheService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: Injector, },
]; };
