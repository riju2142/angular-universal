import * as tslib_1 from "tslib";
import { APP_INITIALIZER, NgModule, Optional, SkipSelf } from '@angular/core';
import { ConfigLoader, ConfigStaticLoader } from './src/config.loader';
import { ConfigPipe } from './src/config.pipe';
import { ConfigService } from './src/config.service';
export * from './src/config.loader';
export * from './src/config.pipe';
export * from './src/config.service';
export function configFactory() {
    return new ConfigStaticLoader();
}
export function initializerFactory(config) {
    var res = function () { return config.init(); };
    return res;
}
var ConfigModule = ConfigModule_1 = (function () {
    function ConfigModule(parentModule) {
        if (parentModule)
            throw new Error('ConfigModule already loaded; import in root module only.');
    }
    ConfigModule.forRoot = function (configuredProvider) {
        if (configuredProvider === void 0) { configuredProvider = {
            provide: ConfigLoader,
            useFactory: (configFactory)
        }; }
        return {
            ngModule: ConfigModule_1,
            providers: [
                configuredProvider,
                ConfigService,
                {
                    provide: APP_INITIALIZER,
                    useFactory: (initializerFactory),
                    deps: [ConfigService],
                    multi: true
                }
            ]
        };
    };
    return ConfigModule;
}());
ConfigModule = ConfigModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [ConfigPipe],
        exports: [ConfigPipe]
    }),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ConfigModule])
], ConfigModule);
export { ConfigModule };
var ConfigModule_1;
